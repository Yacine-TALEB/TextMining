/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InfoFrame.java
 *
 * Created on 2 avr. 2012, 13:29:27
 */
package textmining;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.ObjectInputStream;
import java.lang.reflect.Array;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alucard
 */
public class InfoFrame extends javax.swing.JFrame {
    public boolean b1;
    public boolean b3;
    public boolean b2;
    public boolean j1=false;
    public boolean j2=false;

    /** Creates new form InfoFrame */
    public InfoFrame() {
        initComponents();
        jCheckBox1.setVisible(false);
        jCheckBox2.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(InfoFrame.class);
        jPanel1.setBackground(resourceMap.getColor("jPanel1.background")); // NOI18N
        jPanel1.setForeground(resourceMap.getColor("jPanel1.foreground")); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText(resourceMap.getString("jCheckBox1.text")); // NOI18N
        jCheckBox1.setName("jCheckBox1"); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setText(resourceMap.getString("jCheckBox2.text")); // NOI18N
        jCheckBox2.setName("jCheckBox2"); // NOI18N
        jCheckBox2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox2StateChanged(evt);
            }
        });
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        jButton6.setText(resourceMap.getString("jButton6.text")); // NOI18N
        jButton6.setName("jButton6"); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jCheckBox1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jCheckBox2))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jCheckBox2))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 345, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(resourceMap.getColor("jPanel2.background")); // NOI18N
        jPanel2.setForeground(resourceMap.getColor("jPanel2.foreground")); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText(resourceMap.getString("jButton5.text")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(99, 99, 99)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        jPanel3.setName("jPanel3"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.setName("jTable1"); // NOI18N
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(67, 67, 67))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
jButton2.setVisible(false);
jLabel2.setVisible(false);
        jCheckBox1.setVisible(true);
jCheckBox2.setVisible(true);
        this.b1=true;
      this.b2=false;
      this.b3=false;
jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            
        },
        new String [] {
            "Terme ","Document "," TF "
        }){
        boolean[] canEdit = new boolean [] {
            false, false
        };
        
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });

        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
jButton2.setVisible(true);
jLabel2.setVisible(true);
        this.b2=true;
     this.b1=false;
     this.b3=false;
     jCheckBox1.setVisible(false);
     jCheckBox2.setVisible(false);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            
        },
        new String [] {
            "Document N° ", "Classe "," Nombre mots",
        }){
        boolean[] canEdit = new boolean [] {
            false, false
        };
        
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
      
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        jButton2.setVisible(true);
jLabel2.setVisible(true);
        this.b3=true;
        this.b2=false;
        this.b1=false;
        jCheckBox1.setVisible(false);
        jCheckBox2.setVisible(false);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            
        },
        new String [] {
            "Classe  ", "Nombre documents ",
        }){
        boolean[] canEdit = new boolean [] {
            false, false
        };
        
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel  model = (DefaultTableModel) jTable1.getModel();
        Connection connexion;
		Statement st=null;
		ResultSet resultat=null;
			try {
					//Class.forName("com.mysql.jdbc.Driver");
				connexion = (Connection) DriverManager.getConnection("jdbc:mysql://localhost/TM","root","root");
				st = (Statement) connexion.createStatement();
				
						}
		catch (Exception e){
				System.out.println("Connexion à MySql écouchée !");
							}
        if(this.b3)
        {
        FileReader fr;
            try {
                fr = new FileReader("C:/ressources/mini20-train.txt");
                BufferedReader br=new BufferedReader(fr);
                
                int comp=0;
                String line="";
                String line2="";
                HashMap h=new HashMap();
                String[] nomDocs;
                String classe;
                while ((line=br.readLine()) != null)
                {   BufferedReader br2=new BufferedReader(fr);
                    nomDocs=line.split("\t");
                    classe=nomDocs[0];
                    if(h.get(classe)!= null)
                     comp=(Integer)h.get(classe);
                    else comp=0;
                     h.put(classe, comp+1);
                     
                  /*  if(! h.containsKey(classe)){
                        while ((line2=br2.readLine()) != null)
                        {
                            if(classe.equals(line2.split("\t")[0]))
                            comp++;
                            
                        
                        h.put(classe, comp);
                        
                    }*/
                
                }
                
                Set keys = h.keySet();
                Iterator iteratorKeys = keys.iterator();
                while(model.getRowCount() > 0)
                    {
                         model.removeRow(0);
                        }
         while (iteratorKeys.hasNext()) {
     String key = (String) iteratorKeys.next();
     
     //insertion dans la JTABLE1
     model.insertRow(0, new Object[]{key, h.get(key)});
     
     //append at the end
   //  model.addRow(new Object[]{key, h.get(key)});
     }
                            
            } catch (Exception e) {
                e.printStackTrace();
            }
	
        
        }
        if(this.b2)
        {
             jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            
        },
        new String [] {
            "Document N° ", "Classe "," Nombre mots",
        }){
        boolean[] canEdit = new boolean [] {
            false, false
        };
        
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });model = (DefaultTableModel) jTable1.getModel();
            try {
                resultat=st.executeQuery(
                        "Select document,classe,Count( * )"
+"                      from mot,document"
+"                      where mot.document like document.id"
+"                      group by mot.document"
                        );
                while(model.getRowCount() > 0)
                    {
                         model.removeRow(0);
                        }
               while(resultat.next())
                  
               {model.insertRow(0, new Object[]{(Integer)resultat.getObject(1)/10000, resultat.getObject(2),resultat.getObject(3)});
                 }
              } catch (Exception e) {
              e.printStackTrace()  ;
        
        }
        
        
        
        
        
        
        
        
        }  // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       DefaultTableModel  model = (DefaultTableModel) jTable1.getModel();
      
        FileReader fr;
        /*Connexion à la base de données */
        Connection connexion;
		Statement st=null;
		ResultSet resultat=null;
			try {
					//Class.forName("com.mysql.jdbc.Driver");
				connexion = (Connection) DriverManager.getConnection("jdbc:mysql://localhost/TM","root","root");
				st = (Statement) connexion.createStatement();
				
						}
		catch (Exception e){
				System.out.println("Connexion à MySql écouchée !");
							}
       /*Partie classe selectionnée*/
        if(this.b3)
        {
            String text=jTextField1.getText();
            try {
                //fr = new FileReader("C:/Users/Alucard/docs/TextMining/TP/mini20-train.txt");
                fr = new FileReader("C:/ressources/mini20-train.txt");
                BufferedReader br=new BufferedReader(fr);
                
                int comp=0;
                String line="";
                HashMap h=new HashMap();
                String[] nomDocs;
                String classe;
                while ((line=br.readLine()) != null)
                {   
                    nomDocs=line.split("\t");
                    classe=nomDocs[0];
                    if(h.get(classe)!= null)
                     comp=(Integer)h.get(classe);
                    else comp=0;
                     h.put(classe, comp+1);
                              
                }
                
                
         
    
     while(model.getRowCount() > 0)
                    {
                         model.removeRow(0);
                        }
     //insertion dans la JTABLE1
     model.insertRow(0, new Object[]{text, h.get(text)});
     
     //append at the end
   //  model.addRow(new Object[]{key, h.get(key)});
     
                            
            } catch (Exception e) {
                e.printStackTrace();
            }
        
        }
        
        /*Partie Document  selectionné */
         if(this.b2)
             
        {String text=jTextField1.getText();
        int k=Integer.parseInt(text);
        
        /*changement de model pour afficher l'index */
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            
        },
        new String [] {
            "DocumentID  ", "Terme  ", " tf"
        }){
        boolean[] canEdit = new boolean [] {
            false, false
        };
        
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
          model = (DefaultTableModel) jTable1.getModel();
            /*requete SQL pour afficher l'index du document*/
            try {
                
                resultat=st.executeQuery(
                        "Select document,valeur,Count( * )"
+"                      from mot"
+"                      where document="+(k*10000)+""
//+"                      AND document.id like mot.document"
+"                      group by valeur"
                        );
                
                while(model.getRowCount() > 0)
                    {
                         model.removeRow(0);
                        }
               while(resultat.next())
                  
               {        /*nettoyage de la jTable*/
                   

                   model.insertRow(0, new Object[]{(Integer)resultat.getObject(1)/10000, resultat.getObject(2),resultat.getObject(3)});
                 }
               
              } catch (Exception e) {
              e.printStackTrace()  ;
        
        }
        
        
        // TODO add your handling code here:
            
        }
         
         /*partie Mot - Lemme selectionnée */
         if (this.b1){
             String text=jTextField1.getText();
         if(jCheckBox1.isSelected()){
             /*Si on a selectionné LEMME*/
             try{
             FileInputStream fis=new FileInputStream("C:/ressources/indexOptim.ser");
             ObjectInputStream ois=new ObjectInputStream(fis);
             HashMap h=new HashMap();
             
             
             h=(HashMap)ois.readObject();
             if(h.containsKey(text))
             {HashMap iter=new HashMap();
              iter=(HashMap)h.get(text);
              
              for (Object key : iter.keySet())
                {
                     //Student student = students.get(key);
                    
                    
             model.insertRow(0, new Object[]{text, (Integer)key,(Integer)iter.get(key)});
                }
             }
             
             
             }catch(Exception e)
             
             {
             }
             
             
         };
         if(jCheckBox2.isSelected()){
             /*Si on a selectionné MOT*/
            try{ FileInputStream fis=new FileInputStream("C:/ressources/index.ser");
             ObjectInputStream ois=new ObjectInputStream(fis);
             
             HashMap h=new HashMap();
             h=(HashMap) ois.readObject();
            
             HashMap hh=new HashMap();
             
             hh=(HashMap)h.get(text);
             
                for (Object key : hh.keySet())
                {
                     //Student student = students.get(key);
                    
                    
             model.insertRow(0, new Object[]{text, (Integer)key,(Integer)hh.get(key)});
                }

            
             }
            catch(Exception e)
            {e.printStackTrace();
            }
             
             
         }
         
         
         
         
         
         
         }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox2StateChanged
        
    }//GEN-LAST:event_jCheckBox2StateChanged

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
    
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
       new Principale().setVisible(true);
       this.dispose();
        
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InfoFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InfoFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
